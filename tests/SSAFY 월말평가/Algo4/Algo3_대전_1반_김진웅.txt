# A 배열 중에서 출발지로 선택할 수 있는 좌표를 starts 리스트에 모은다.
starts = []
for (i = 0 부터 N 까지 반복)
    for (j = 0 부터 N 까지 반복)
        if (A[i][j] 가 2 라면)
            starts += (i, j)

# 변수 생성
arr <- 조합에서 뽑힌 좌표를 저장하기 위한 리스트
answer <- 최소값을 저장하는 변수
solve(0, 0)

# starts 리스트에서 2개를 뽑는다.(a -> b와 b -> a는 같은 경우이므로 중복은 제거한다.)
def solve(n, depth, now) <- starts 의 길이 n, 현재 깊이 depth, 시작 지점 now
    global answer
    if (depth 가 2라면)
        start <- 출발지점 (arr[0])
        end <- 도착지점 (arr[1])
        answer = min(answer, cal_distance(start, end)) <- 최소값 갱신
        return
    for (i = now 부터 n 까지 반복)
        if (starts 의 i번째 항목을 방문하지 않았다면)
            arr 에 starts[i]를 넣는다
            i 번째 항목 방문표시
            solve(n, depth + 1, i)
            i 번째 항목 방문표시 해제
            arr 의 마지막 요소 제거


# 뽑힌 2개의 좌표를 잇는 최소 거리를 구한다. (BFS)
def cal_distance(start, end) <- 시작지점 죄표 start, 도착지점 좌표 end
    큐 생성
    시작점 start 를 큐에 삽입
    start 를 방문한 것으로 표시
    while (큐가 비어있지 않은 경우)
        cur, d <- 큐의 첫번째 좌표와 거리 반환
        if (cur 이 도착지점과 동일하다면)
            return d
        for (cur 과 근접한 모든 칸에 대해)
            next <- cur 과 인접한 좌표
            next 가 방문되지 않은 곳이고, A의 next 좌표가 벽이 아니라면
            next 와 d + 1을 큐에 넣고 방문한 것으로 표시


# 계산된 최소 거리가 홀수인 경우 (거리 // 2 + 1), 짝수인 경우 (거리 // 2)를 한다.
if (answer 가 홀수라면)
    answer = answer // 2 + 1
else
    answer = answer // 2

# 정답 출력
print(answer)
