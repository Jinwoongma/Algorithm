[input]: 
4
1111111111111100
1111111111111100
1111111111110000
1111111111110000
1111000011111111
1111000011111111
1111000011111111
1111000011111111
1100111100000000
0000111100000000
1111111100000000
1111111100000000
1100111100000000
1111111100000000
1100111100000000
1100111100000000

[output]:  
xx1110x1x100011xxx11000111x1x00111010

[pseudo code]:
get N					# N: 배열 크기를 2로 나눈 값
get MAP					# MAP: 흑백그림 정보(1: 흰색, 0: 검은색)
do result <- ''				# result: 출력할 압축 결과

def solve(n, y, x): 				# n: 현재 사각형 길이, y: 현재 y축 시작점, x: 현재 x축 시작점
    do if n == 1:				# 길이가 1일 때(기저 조건)
        do result <- result +  str(MAP[y][x])	
        return
    flag = True				# flag == True: 더 나누지 않는다, flag == False: 더 나눈다
    for i in range(y, y + n):
        do if flag: break		
        for j in range(x, x + n): 
            do if MAP[i][j] != MAP[y][x]:		# 사각형의 왼쪽 위 색상과 다를 경우 사각형을 더 나눈다
                flag = False
                break
    do if flag:  				# 사각형을 더 나누지 않는 경우
        result <- result + str(MAP[y][x])		
    do else:  				# 사각형을 더 나누는 경우
        decrease_n <- n // 2
        result <- result + 'x'			
        solve(decrease_n, y, x)			# 왼쪽위를 시작점으로 줄어든 길이만큼 재귀적 실행
        solve(decrease_n, y, x + decrease_n)	# 오른쪽위를 시작점으로 줄어든 길이만큼 재귀적 실행
        solve(decrease_n, y + decrease_n, x)	# 왼쪽 아래를 시작점으로 줄어든 길이만큼 재귀적 실행
        solve(decrease_n, y + decrease_n, x + decrease_n)	# 오른쪽 아래를 시작점으로 줄어든 길이만큼 재귀적 실행

do solve(2 ** N, 0, 0)
display result

